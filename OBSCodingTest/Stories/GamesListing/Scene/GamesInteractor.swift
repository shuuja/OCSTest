//
//  GamesInteractor.swift
//  OBSCodingTest
//
//  Created by Shuja MBP on 26/03/2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

// MARK: - GamesBusinessLogic

protocol GamesBusinessLogic {

    func fetchGames() async
    func fetchGamesAthletes(request: Game.GameAthletes.Request) async
    func prepareGames(games: [Game.ViewModel], gamesWithAthletes: [Game.ViewModel])
}

// MARK: - GamesDataStore

protocol GamesDataStore {

    var selectedAthlete: AthleteResponse! { get set }
}

// MARK: - GamesInteractor

class GamesInteractor: GamesBusinessLogic, GamesDataStore {

    // MARK: Properties

    var selectedAthlete: AthleteResponse!
    var presenter: GamesPresentationLogic?
    var worker = GamesWorker(apiStore: GamesAPIStore())

    // MARK: Methods

    func fetchGames() async {
        let games = await worker.fetchGames()
        presenter?.presentGames(
            response: Game.GameListing.Response(games: games)
        )
    }

    func fetchGamesAthletes(
        request: Game.GameAthletes.Request
    ) async {
        await worker.fetchGamesAthletes(
            gameIDS: request.gameIDS
        ) { [weak self] athletes in
            guard let self else { return }
            self.presenter?.presentGameAthletes(
                response: Game.GameAthletes.Response(
                    gamesAthletes: athletes
                )
            )
        }
    }

    func prepareGames(
        games: [Game.ViewModel],
        gamesWithAthletes: [Game.ViewModel]
    ) {
        var sortedGames = games.sorted(by: { $0.id < $1.id })
        let sortedGamesWithAthletes = gamesWithAthletes.sorted(by: { $0.id < $1.id })

        for i in stride(from: 0, to: games.count, by: 1) {
            sortedGames[i].athletes = sortedGamesWithAthletes[i].athletes
        }

        sortedGames = sortedGames.filter({ $0.athletes.count != 0 }).sorted(by: { $0.year > $1.year })

        presenter?.presentPrepareGames(
            response: Game.Prepare.Response(
                games: sortedGames
            )
        )
    }
}
